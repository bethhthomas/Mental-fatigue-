<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2020.2.4">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': ''}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="html" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="JS libs" updates="None" val="packaged" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="[]" valType="fileList"/>
    <Param name="Save csv file" updates="None" val="True" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="norm" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1536, 864]" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="Mental Fatigue Training Session" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="instr">
      <CodeComponent name="js_math_fix_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="// Code to fix reference errors in JS&amp;#10;thisExp = psychoJS.experiment;&amp;#10;win = psychoJS.window;&amp;#10;event = psychoJS.eventManager;&amp;#10;Array.prototype.append = [].push;&amp;#10;shuffle = util.shuffle;&amp;#10;document.documentElement.style.cursor = 'none';&amp;#10;&amp;#10;// Math related fixes&amp;#10;//pi = Math.PI;&amp;#10;//sin = Math.sin;&amp;#10;//cos = Math.cos;&amp;#10;//sqrt = Math.sqrt;&amp;#10;randint = function(min, maxplusone) {&amp;#10;  return Math.floor(Math.random() * (maxplusone - min) ) + min;&amp;#10;}&amp;#10;shuffle = util.shuffle;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="//use strict&amp;#10;&amp;#10;// Code to fix reference errors in JS&amp;#10;thisExp = psychoJS.experiment;&amp;#10;win = psychoJS.window;&amp;#10;event = psychoJS.eventManager;&amp;#10;Array.prototype.append = [].push;&amp;#10;document.documentElement.style.cursor = 'none';&amp;#10;&amp;#10;// Math related fixes&amp;#10;//pi = Math.PI;&amp;#10;//sin = Math.sin;&amp;#10;//cos = Math.cos;&amp;#10;//sqrt = Math.sqrt;&amp;#10;randint = function(min, maxplusone) {&amp;#10;  return Math.floor(Math.random() * (maxplusone - min) ) + min;&amp;#10;}" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="js_math_fix_code" valType="code"/>
      </CodeComponent>
      <CodeComponent name="elapsed_time">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="elapsedTime = util.Clock()" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="elapsedTime = new util.Clock();&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="psychoJS.experiment.addData(&quot;elapsed.time&quot;, elapsedTime.getTime());&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="psychoJS.experiment.addData('elapsed.time', elapsedTime.getTime())" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="elapsed_time" valType="code"/>
      </CodeComponent>
      <CodeComponent name="instructions_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="instrDict = { &quot;1&quot;: &quot;Welcome to the session and thank you for volunteering to take part in this study \n\nThis session is a training session where you will learn about the different tasks that you will need to complete in the testing session.\n\n Press the right arrow on your keyboard to continue&quot;,&amp;#10;              &quot;2&quot;: &quot;If you want to quit at any point, press the escape key. If you quit your data will not be saved and you will be asked to repeat the session \n\nPlease make sure that you are sitting comfortably in a quiet environment where you will not be interrupted. There will be multiple chances for you to take rest breaks if you need to. Please also ensure that your computer is connected to a power source and will not enter sleep mode\n\n Press the right arrow to continue, or the left arrow to go back to the previous screen&quot;,&amp;#10;              &quot;3&quot;: &quot;Today you will learn four different tasks: \n\n1. AX-CPT \n2. n-back \n3. visual search \n4. mental rotation \n\n Press the right arrow to continue to the AX-CPT task instructions&quot;,&amp;#10;              &quot;4&quot;: &quot;In this task you will see a series of letters one after another \n\nFor example:\n A - W - N - X \n (where - is a blank screen)\n\n The first letter will be red \n Then there will be two white letters \n The final letter will also be red \n\n Press the right arrow to continue, or the left arrow to go back to the previous screen&quot;,&amp;#10;              &quot;5&quot;: &quot;If the first red letter is an A and the second red letter is an X, press 'k' on your keyboard. For any other combinations of letters, press 'd' \n\n For example: \n if you see A - U - N - X you should press 'k' \n if you see B - O - J - X you should press 'd' \n if you see F - D - Z - I you should press 'd' \n if you see A - L - C - Z you should press 'd' \n\n Press the right arrow to continue, or the left arrow to go back to the previous screen&quot;,&amp;#10;              &quot;6&quot;: &quot;When you respond correctly, 'correct' will appear \n\n When you respond incorrectly, 'incorrect' will appear \n\n You must respond as quickly and accurately as possible \n\n Press 'k' to begin the five minute practice session, or press the left arrow to go back to the previous screen&quot;,&amp;#10;              &quot;7&quot;: &quot;In this task, you will see a series of letters one after another. Your task is to decide whether the letter on the screen is the same as the one 3 letters ago \n\n If it is the same, press 'k' \n If if is not the same, press 'd' \n\n Press the right arrow to continue&quot;,&amp;#10;              &quot;8&quot;: &quot;For example, in the sequence: \n B - F - G - B - P - B - F \n you would press \n d - d - d - k - d - d - d \n\n Press the right arrow to continue, or the left arrow to go back to the previous screen&quot;,&amp;#10;              &quot;9&quot;: &quot;When you respond correctly, 'correct' will appear \n\n When you respond incorrectly, 'incorrect' will appear \n\n You must respond as quickly and accurately as possible \n\n Press 'k' to begin the five minute practice session, or press the left arrow to go back to the previous screen&quot;,&amp;#10;              &quot;10&quot;: &quot;In this task you will be presented with lots of letters on a page \n\n The letters will be in different places and at different angles\n\n Press the right arrow to continue&quot;,&amp;#10;              &quot;11&quot;: &quot;Your task is to press 'k' if the letter T is on the screen\n\n If the letter T is not on the screen, press 'd'\n\n Press the right arrow to continue, or the left arrow to go back to the previous screen&quot;,&amp;#10;              &quot;12&quot;: &quot;You must complete this task as quickly and accurately as possible \n\n Press 'k' to begin the five minute practice session, or press the left arrow to go back to the previous screen&quot;,&amp;#10;              &quot;13&quot;: &quot;In this task, you will see a series of pictures\n\n Each picture has two shapes in it \n\n Your task is to decide if the two shapes are the same \n\nIf the two shapes are the same, press 'k'. If the two shapes are different, press 'd' \n\nPress the right arrow to continue&quot;,&amp;#10;              &quot;14&quot;: &quot;The way the shapes are oriented will change. Here are two matching shapes that are oriented the same way:\n\n\n\n\n\n\n\n\n\nPress the right arrow to continue, or the left arrow to go back to the previous screen&quot;,&amp;#10;              &quot;15&quot;: &quot;Here are two matching shapes that are oriented differently:\n\n\n\n\n\n\n\n\n\nPress the right arrow to continue, or the left arrow to go back to the previous screen&quot;,&amp;#10;              &quot;16&quot;: &quot;Here are two shapes that do not match:\n\n\n\n\n\n\n\n\n\nPress the right arrow to continue, or the left arrow to go back to the previous screen&quot;,&amp;#10;              &quot;17&quot;: &quot;When you respond correctly, 'correct' will appear \n\n When you respond incorrectly, 'incorrect' will appear \n\n You must respond as quickly and accurately as possible \n\n Press 'k' to begin the five minute practice session, or press the left arrow to go back to the previous screen \n\n Please note there may be a delay while this task loads&quot;&amp;#10;}&amp;#10;&amp;#10;&amp;#10;currentInstr = 1" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="instrDict = {&quot;1&quot;: &quot;Welcome to the session and thank you for volunteering to take part in this study \n\nThis session is a training session where you will learn about the different tasks that you will need to complete in the testing session.\n\n Press the right arrow on your keyboard to continue&quot;, &quot;2&quot;: &quot;If you want to quit at any point, press the escape key. If you quit your data will not be saved and you will be asked to repeat the session \n\nPlease make sure that you are sitting comfortably in a quiet environment where you will not be interrupted. There will be multiple chances for you to take rest breaks if you need to. Please also ensure that your computer is connected to a power source and will not enter sleep mode\n\n Press the right arrow to continue, or the left arrow to go back to the previous screen&quot;, &quot;3&quot;: &quot;Today you will learn four different tasks: \n\n1. AX-CPT \n2. n-back \n3. visual search \n4. mental rotation \n\n Press the right arrow to continue to the AX-CPT task instructions&quot;, &quot;4&quot;: &quot;In this task you will see a series of letters one after another \n\nFor example:\n A - W - N - X \n (where - is a blank screen)\n\n The first letter will be red \n Then there will be two white letters \n The final letter will also be red \n\n Press the right arrow to continue, or the left arrow to go back to the previous screen&quot;, &quot;5&quot;: &quot;If the first red letter is an A and the second red letter is an X, press 'k' on your keyboard. For any other combinations of letters, press 'd' \n\n For example: \n if you see A - U - N - X you should press 'k' \n if you see B - O - J - X you should press 'd' \n if you see F - D - Z - I you should press 'd' \n if you see A - L - C - Z you should press 'd' \n\n Press the right arrow to continue, or the left arrow to go back to the previous screen&quot;, &quot;6&quot;: &quot;When you respond correctly, 'correct' will appear \n\n When you respond incorrectly, 'incorrect' will appear \n\n You must respond as quickly and accurately as possible \n\n Press 'k' to begin the five minute practice session, or press the left arrow to go back to the previous screen&quot;, &quot;7&quot;: &quot;In this task, you will see a series of letters one after another. Your task is to decide whether the letter on the screen is the same as the one 3 letters ago \n\n If it is the same, press 'k' \n If if is not the same, press 'd' \n\n Press the right arrow to continue&quot;, &quot;8&quot;: &quot;For example, in the sequence: \n B - F - G - B - P - B - F \n you would press \n d - d - d - k - d - d - d \n\n Press the right arrow to continue, or the left arrow to go back to the previous screen&quot;, &quot;9&quot;: &quot;When you respond correctly, 'correct' will appear \n\n When you respond incorrectly, 'incorrect' will appear \n\n You must respond as quickly and accurately as possible \n\n Press 'k' to begin the five minute practice session, or press the left arrow to go back to the previous screen&quot;, &quot;10&quot;: &quot;In this task you will be presented with lots of letters on a page \n\n The letters will be in different places and at different angles\n\n Press the right arrow to continue&quot;, &quot;11&quot;: &quot;Your task is to press 'k' if the letter T is on the screen\n\n If the letter T is not on the screen, press 'd'\n\n Press the right arrow to continue, or the left arrow to go back to the previous screen&quot;, &quot;12&quot;: &quot;You must complete this task as quickly and accurately as possible \n\n Press 'k' to begin the five minute practice session, or press the left arrow to go back to the previous screen&quot;, &quot;13&quot;: &quot;In this task, you will see a series of pictures\n\n Each picture has two shapes in it \n\n Your task is to decide if the two shapes are the same \n\nIf the two shapes are the same, press 'k'. If the two shapes are different, press 'd' \n\nPress the right arrow to continue&quot;, &quot;14&quot;: &quot;The way the shapes are oriented will change. Here are two matching shapes that are oriented the same way:\n\n\n\n\n\n\n\n\n\nPress the right arrow to continue, or the left arrow to go back to the previous screen&quot;, &quot;15&quot;: &quot;Here are two matching shapes that are oriented differently:\n\n\n\n\n\n\n\n\n\nPress the right arrow to continue, or the left arrow to go back to the previous screen&quot;, &quot;16&quot;: &quot;Here are two shapes that do not match:\n\n\n\n\n\n\n\n\n\nPress the right arrow to continue, or the left arrow to go back to the previous screen&quot;, &quot;17&quot;: &quot;When you respond correctly, 'correct' will appear \n\n When you respond incorrectly, 'incorrect' will appear \n\n You must respond as quickly and accurately as possible \n\n Press 'k' to begin the five minute practice session, or press the left arrow to go back to the previous screen \n\n Please note there may be a delay while this task loads&quot;};&amp;#10;currentInstr = 1;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(key_resp.keys);&amp;#10;if ((key_resp.keys === &quot;left&quot;)) {&amp;#10;    currentInstr = (Number.parseInt(currentInstr) - 1);&amp;#10;} else {&amp;#10;    if ((key_resp.keys === &quot;right&quot;)) {&amp;#10;        currentInstr = (Number.parseInt(currentInstr) + 1);&amp;#10;    }&amp;#10;}&amp;#10;if ((currentInstr === 0)) {&amp;#10;    currentInstr = 1;&amp;#10;}&amp;#10;if ((currentInstr === 4)) {&amp;#10;    currentLoop.finished = true;&amp;#10;}&amp;#10;currentInstr = currentInstr.toString();&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(key_resp.keys)&amp;#10;&amp;#10;if key_resp.keys == &quot;left&quot;:&amp;#10;    currentInstr = int(currentInstr) - 1&amp;#10;elif key_resp.keys == &quot;right&quot;:&amp;#10;    currentInstr = int(currentInstr) + 1&amp;#10;&amp;#10;if currentInstr == 0:&amp;#10;    currentInstr = 1  # can't go lower than&amp;#10;&amp;#10;if currentInstr == 4:&amp;#10;    currentLoop.finished = True&amp;#10;&amp;#10;currentInstr = str(currentInstr)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="instructions_code" valType="code"/>
      </CodeComponent>
      <CodeComponent name="centerAlignMaster">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="instrHeaderText.setAlignHoriz(&quot;center&quot;);&amp;#10;text.setAlignHoriz(&quot;center&quot;);&amp;#10;instrHeaderText_2.setAlignHoriz(&quot;center&quot;);&amp;#10;text_2.setAlignHoriz(&quot;center&quot;);&amp;#10;restBreak1Text.setAlignHoriz(&quot;center&quot;);&amp;#10;instrHeaderText_3.setAlignHoriz(&quot;center&quot;);&amp;#10;text_3.setAlignHoriz(&quot;center&quot;);&amp;#10;restBreak2Text.setAlignHoriz(&quot;center&quot;);&amp;#10;instrHeaderText_4.setAlignHoriz(&quot;center&quot;);&amp;#10;text_4.setAlignHoriz(&quot;center&quot;);&amp;#10;restBreak3Text.setAlignHoriz(&quot;center&quot;);&amp;#10;instrHeaderText_5.setAlignHoriz(&quot;center&quot;);&amp;#10;text_5.setAlignHoriz(&quot;center&quot;);&amp;#10;end_text.setAlignHoriz(&quot;center&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="instrHeaderText.setAlignHoriz('center')&amp;#10;text.setAlignHoriz('center')&amp;#10;&amp;#10;instrHeaderText_2.setAlignHoriz('center')&amp;#10;text_2.setAlignHoriz('center')&amp;#10;&amp;#10;restBreak1Text.setAlignHoriz('center')&amp;#10;&amp;#10;instrHeaderText_3.setAlignHoriz('center')&amp;#10;text_3.setAlignHoriz('center')&amp;#10;&amp;#10;restBreak2Text.setAlignHoriz('center')&amp;#10;&amp;#10;instrHeaderText_4.setAlignHoriz('center')&amp;#10;text_4.setAlignHoriz('center')&amp;#10;&amp;#10;restBreak3Text.setAlignHoriz('center')&amp;#10;&amp;#10;instrHeaderText_5.setAlignHoriz('center')&amp;#10;text_5.setAlignHoriz('center')&amp;#10;&amp;#10;end_text.setAlignHoriz('center')&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="centerAlignMaster" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp">
        <Param name="allowedKeys" updates="constant" val="&quot;left&quot;, &quot;right&quot;" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="instrHeaderText">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="instrHeaderText" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0.8)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Introduction" valType="str"/>
        <Param name="units" updates="None" val="norm" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="text">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.075" valType="code"/>
        <Param name="name" updates="None" val="text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$instrDict[currentInstr]" valType="str"/>
        <Param name="units" updates="None" val="norm" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="instrAXCPT">
      <CodeComponent name="elapsed_timer">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="psychoJS.experiment.addData(&quot;elapsed.time&quot;, elapsedTime.getTime());&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="psychoJS.experiment.addData('elapsed.time', elapsedTime.getTime())" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="elapsed_timer" valType="code"/>
      </CodeComponent>
      <CodeComponent name="code_2">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(key_resp_2.keys);&amp;#10;if ((key_resp_2.keys === &quot;left&quot;)) {&amp;#10;    currentInstr = (Number.parseInt(currentInstr) - 1);&amp;#10;} else {&amp;#10;    if ((key_resp_2.keys === &quot;right&quot;)) {&amp;#10;        currentInstr = (Number.parseInt(currentInstr) + 1);&amp;#10;    }&amp;#10;}&amp;#10;if ((currentInstr === 3)) {&amp;#10;    currentInstr = 4;&amp;#10;}&amp;#10;if ((currentInstr === 7)) {&amp;#10;    currentInstr = 6;&amp;#10;}&amp;#10;if ((key_resp_2.keys === &quot;k&quot;)) {&amp;#10;    currentLoop.finished = true;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(key_resp_2.keys)&amp;#10;&amp;#10;if key_resp_2.keys == &quot;left&quot;:&amp;#10;    currentInstr = int(currentInstr) - 1&amp;#10;elif key_resp_2.keys == &quot;right&quot;:&amp;#10;    currentInstr = int(currentInstr) + 1&amp;#10;&amp;#10;if currentInstr == 3:&amp;#10;    currentInstr = 4  # can't go lower than 4&amp;#10;&amp;#10;if currentInstr == 7:&amp;#10;    currentInstr = 6  # can't go higher than 6&amp;#10;&amp;#10;if key_resp_2.keys == &quot;k&quot;:&amp;#10;    currentLoop.finished = True&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_2" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_2">
        <Param name="allowedKeys" updates="constant" val="&quot;left&quot;, &quot;right&quot;, &quot;k&quot;" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="instrHeaderText_2">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="instrHeaderText_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0.8)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="AX-CPT Instructions" valType="str"/>
        <Param name="units" updates="None" val="norm" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="text_2">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.075" valType="code"/>
        <Param name="name" updates="None" val="text_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$instrDict[currentInstr]" valType="str"/>
        <Param name="units" updates="None" val="norm" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="timer">
      <CodeComponent name="timer_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="probeVal = []" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="probeVal = [];&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if loopTimer.getTime() &gt; 300:&amp;#10;    currentLoop.finished = True" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="if ((loopTimer.getTime() &gt; 300)) {&amp;#10;    currentLoop.finished = true;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="psychoJS.experiment.addData(&quot;elapsed.time&quot;, elapsedTime.getTime());&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="psychoJS.experiment.addData('elapsed.time', elapsedTime.getTime())" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="timer_code" valType="code"/>
      </CodeComponent>
      <TextComponent name="timer_text">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.3" valType="code"/>
        <Param name="name" updates="None" val="timer_text" valType="code"/>
        <Param name="opacity" updates="constant" val="0" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="x" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="AXCPTtrial">
      <CodeComponent name="AXCPTtrial_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="Bletters = [&quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;I&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;M&quot;, &quot;N&quot;, &quot;O&quot;, &quot;P&quot;, &quot;Q&quot;, &quot;R&quot;, &quot;S&quot;, &quot;T&quot;, &quot;U&quot;, &quot;V&quot;, &quot;W&quot;, &quot;X&quot;, &quot;Z&quot;];&amp;#10;Yletters = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;I&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;M&quot;, &quot;N&quot;, &quot;O&quot;, &quot;P&quot;, &quot;Q&quot;, &quot;R&quot;, &quot;S&quot;, &quot;T&quot;, &quot;U&quot;, &quot;V&quot;, &quot;W&quot;, &quot;Z&quot;];&amp;#10;distractors = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;I&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;M&quot;, &quot;N&quot;, &quot;O&quot;, &quot;P&quot;, &quot;Q&quot;, &quot;R&quot;, &quot;S&quot;, &quot;T&quot;, &quot;U&quot;, &quot;V&quot;, &quot;W&quot;, &quot;X&quot;, &quot;Z&quot;];&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="Bletters = [&quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;I&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;M&quot;, &quot;N&quot;, &quot;O&quot;, &quot;P&quot;, &quot;Q&quot;, &quot;R&quot;, &quot;S&quot;, &quot;T&quot;, &quot;U&quot;, &quot;V&quot;, &quot;W&quot;, &quot;X&quot;, &quot;Z&quot;];&amp;#10;Yletters = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;I&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;M&quot;, &quot;N&quot;, &quot;O&quot;, &quot;P&quot;, &quot;Q&quot;, &quot;R&quot;, &quot;S&quot;, &quot;T&quot;, &quot;U&quot;, &quot;V&quot;, &quot;W&quot;, &quot;Z&quot;];&amp;#10;distractors = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;I&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;M&quot;, &quot;N&quot;, &quot;O&quot;, &quot;P&quot;, &quot;Q&quot;, &quot;R&quot;, &quot;S&quot;, &quot;T&quot;, &quot;U&quot;, &quot;V&quot;, &quot;W&quot;, &quot;X&quot;, &quot;Z&quot;];&amp;#10;&amp;#10;function choice(arr) {&amp;#10;  return arr[Math.floor(Math.random() * arr.length)];&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="function choice(arr) {&amp;#10;  return arr[Math.floor(Math.random() * arr.length)];&amp;#10;}&amp;#10;&amp;#10;distractor1Val = choice(distractors);&amp;#10;distractor2Val = choice(distractors);&amp;#10;if ((trialType === &quot;target&quot;)) {&amp;#10;    cueVal = &quot;A&quot;;&amp;#10;    probeVal = &quot;X&quot;;&amp;#10;} else {&amp;#10;    if ((trialType === &quot;probeWrong&quot;)) {&amp;#10;        cueVal = &quot;A&quot;;&amp;#10;        probeVal = choice(Yletters);&amp;#10;    } else {&amp;#10;        if ((trialType === &quot;cueWrong&quot;)) {&amp;#10;            cueVal = choice(Bletters);&amp;#10;            probeVal = &quot;X&quot;;&amp;#10;        } else {&amp;#10;            if ((trialType === &quot;bothWrong&quot;)) {&amp;#10;                cueVal = choice(Bletters);&amp;#10;                probeVal = choice(Yletters);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="#function choice(arr) {&amp;#10;#  return arr[Math.floor(Math.random() * arr.length)];&amp;#10;#}&amp;#10;&amp;#10;distractor1Val = choice(distractors)&amp;#10;distractor2Val = choice(distractors)&amp;#10;&amp;#10;&amp;#10;&amp;#10;if trialType == 'target':&amp;#10;    cueVal = 'A'&amp;#10;    probeVal = 'X'&amp;#10;&amp;#10;elif trialType == 'probeWrong':&amp;#10;    cueVal = 'A'&amp;#10;    probeVal = choice(Yletters)&amp;#10;&amp;#10;elif trialType == 'cueWrong':&amp;#10;    cueVal = choice(Bletters)&amp;#10;    probeVal = 'X'&amp;#10;&amp;#10;elif trialType == 'bothWrong':&amp;#10;    cueVal = choice(Bletters)&amp;#10;    probeVal = choice(Yletters)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="AXCPTtrial_code" valType="code"/>
      </CodeComponent>
      <TextComponent name="cue_text">
        <Param name="color" updates="constant" val="$[1.000,-1.000,-1.000]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="0.3" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.15" valType="code"/>
        <Param name="name" updates="None" val="cue_text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$cueVal" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="break1">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="break1" valType="code"/>
        <Param name="opacity" updates="constant" val="0" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.3" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="x" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="distractor1">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.15" valType="code"/>
        <Param name="name" updates="None" val="distractor1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="1.5" valType="code"/>
        <Param name="stopType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.8" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$distractor1Val" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="break2">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="break2" valType="code"/>
        <Param name="opacity" updates="constant" val="0" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="1.8" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="x" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="distractor2">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.15" valType="code"/>
        <Param name="name" updates="None" val="distractor2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="3" valType="code"/>
        <Param name="stopType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3.3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$distractor2Val" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="break3">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="break3" valType="code"/>
        <Param name="opacity" updates="constant" val="0" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="3.3" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="x" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="AXCPTprobe">
      <TextComponent name="probe_text">
        <Param name="color" updates="constant" val="$[1.000,-1.000,-1.000]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.15" valType="code"/>
        <Param name="name" updates="None" val="probe_text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$probeVal" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="AXCPT_resp">
        <Param name="allowedKeys" updates="constant" val="'k', 'd'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$corrResponse" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="AXCPT_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.5" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="AXCPTfeedback">
      <CodeComponent name="AXCPTfeedback_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="msg = ' '" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="msg = &quot; &quot;;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if (AXCPT_resp.corr) {&amp;#10;    msg = &quot;Correct&quot;;&amp;#10;} else {&amp;#10;    msg = &quot;Incorrect&quot;;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if AXCPT_resp.corr:&amp;#10;    msg = &quot;Correct&quot;&amp;#10;else:&amp;#10;    msg = &quot;Incorrect&quot;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="AXCPTfeedback_code" valType="code"/>
      </CodeComponent>
      <TextComponent name="AXCPTfeedback_text">
        <Param name="color" updates="constant" val="$[1.000,1.000,-1.000]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.15" valType="code"/>
        <Param name="name" updates="None" val="AXCPTfeedback_text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$msg" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="restBreak1">
      <CodeComponent name="elapsed_timer_3">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="break1Timer = new util.Clock();&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="break1Timer = util.Clock()" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="psychoJS.experiment.addData(&quot;elapsed.time&quot;, elapsedTime.getTime());&amp;#10;psychoJS.experiment.addData(&quot;break1.duration&quot;, break1Timer.getTime());&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="psychoJS.experiment.addData('elapsed.time', elapsedTime.getTime())&amp;#10;psychoJS.experiment.addData('break1.duration', break1Timer.getTime())" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="elapsed_timer_3" valType="code"/>
      </CodeComponent>
      <TextComponent name="restBreak1Text">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.075" valType="code"/>
        <Param name="name" updates="None" val="restBreak1Text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="End of AX-CPT practice&amp;#10;&amp;#10;Please rest now if you need to or press the right arrow to continue to the next task" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="restBreak1_key_resp">
        <Param name="allowedKeys" updates="constant" val="['right']" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="restBreak1_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="instrNBack">
      <CodeComponent name="elapsed_timer_6">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="psychoJS.experiment.addData(&quot;elapsed.time&quot;, elapsedTime.getTime());&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="psychoJS.experiment.addData('elapsed.time', elapsedTime.getTime())" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="elapsed_timer_6" valType="code"/>
      </CodeComponent>
      <CodeComponent name="code_3">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if ((currentInstr === 6)) {&amp;#10;    currentInstr = 7;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if currentInstr == 6:&amp;#10;    currentInstr = 7  # ensure correct instructions are showing for n-back&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(key_resp_3.keys);&amp;#10;if ((key_resp_3.keys === &quot;left&quot;)) {&amp;#10;    currentInstr = (Number.parseInt(currentInstr) - 1);&amp;#10;} else {&amp;#10;    if ((key_resp_3.keys === &quot;right&quot;)) {&amp;#10;        currentInstr = (Number.parseInt(currentInstr) + 1);&amp;#10;    }&amp;#10;}&amp;#10;if ((currentInstr === 6)) {&amp;#10;    currentInstr = 7;&amp;#10;}&amp;#10;if ((currentInstr === 10)) {&amp;#10;    currentInstr = 9;&amp;#10;}&amp;#10;if ((key_resp_3.keys === &quot;k&quot;)) {&amp;#10;    currentLoop.finished = true;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(key_resp_3.keys)&amp;#10;&amp;#10;if key_resp_3.keys == &quot;left&quot;:&amp;#10;    currentInstr = int(currentInstr) - 1&amp;#10;elif key_resp_3.keys == &quot;right&quot;:&amp;#10;    currentInstr = int(currentInstr) + 1&amp;#10;&amp;#10;if currentInstr == 6:&amp;#10;    currentInstr = 7  # can't go lower than 7&amp;#10;&amp;#10;if currentInstr == 10:&amp;#10;    currentInstr = 9  # can't go higher than 9&amp;#10;&amp;#10;if key_resp_3.keys == &quot;k&quot;:&amp;#10;    currentLoop.finished = True&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_3" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_3">
        <Param name="allowedKeys" updates="constant" val="&quot;left&quot;, &quot;right&quot;, &quot;k&quot;" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_3" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="instrHeaderText_3">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="instrHeaderText_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0.8)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="N-Back Instructions" valType="str"/>
        <Param name="units" updates="None" val="norm" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="text_3">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.075" valType="code"/>
        <Param name="name" updates="None" val="text_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$instrDict[currentInstr]" valType="str"/>
        <Param name="units" updates="None" val="norm" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="NBackFirst3Trials">
      <CodeComponent name="NBackFirst3Trials_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="Back2minus1=[]&amp;#10;Back2minus2=[]&amp;#10;Back2minus3=[]" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="Back2minus1 = [];&amp;#10;Back2minus2 = [];&amp;#10;Back2minus3 = [];&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="function choice(arr) {&amp;#10;  return arr[Math.floor(Math.random() * arr.length)];&amp;#10;}&amp;#10;&amp;#10;letters = [&quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;M&quot;, &quot;N&quot;, &quot;P&quot;, &quot;Q&quot;, &quot;R&quot;, &quot;S&quot;, &quot;T&quot;, &quot;V&quot;, &quot;W&quot;, &quot;X&quot;, &quot;Z&quot;];&amp;#10;nletter = choice(letters);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="letters = ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Z']&amp;#10;nletter=choice(letters)&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="Back2minus3 = Back2minus2;&amp;#10;Back2minus2 = Back2minus1;&amp;#10;Back2minus1 = nletter;&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="Back2minus3=Back2minus2&amp;#10;Back2minus2=Back2minus1&amp;#10;Back2minus1=nletter" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="NBackFirst3Trials_code" valType="code"/>
      </CodeComponent>
      <TextComponent name="NBackText_1">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.15" valType="code"/>
        <Param name="name" updates="None" val="NBackText_1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$nletter" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="NBack_resp_1">
        <Param name="allowedKeys" updates="constant" val="'k', 'd'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$corrResponse" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="NBack_resp_1" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="NBackRemainderTrials">
      <CodeComponent name="NBackTrials_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="function choice(arr) {&amp;#10;  return arr[Math.floor(Math.random() * arr.length)];&amp;#10;}&amp;#10;&amp;#10;if ((trialType === &quot;nonTarget&quot;)) {&amp;#10;    letters = [&quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;M&quot;, &quot;N&quot;, &quot;P&quot;, &quot;Q&quot;, &quot;R&quot;, &quot;S&quot;, &quot;T&quot;, &quot;V&quot;, &quot;W&quot;, &quot;X&quot;, &quot;Z&quot;];&amp;#10;    nletter = choice(letters);&amp;#10;    if ((nletter === Back2minus1)) {&amp;#10;        nletter = choice(letters);&amp;#10;    }&amp;#10;    if ((nletter === Back2minus2)) {&amp;#10;        nletter = choice(letters);&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((trialType === &quot;target&quot;)) {&amp;#10;        nletter = Back2minus3;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if trialType=='nonTarget':&amp;#10;    letters = ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Z']&amp;#10;    nletter=choice(letters)&amp;#10;    if nletter==Back2minus1:&amp;#10;            nletter=choice(letters)&amp;#10;    if nletter==Back2minus2:&amp;#10;            nletter=choice(letters)&amp;#10;elif trialType=='target':&amp;#10;    nletter=Back2minus3" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="Back2minus3 = Back2minus2;&amp;#10;Back2minus2 = Back2minus1;&amp;#10;Back2minus1 = nletter;&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="Back2minus3=Back2minus2&amp;#10;Back2minus2=Back2minus1&amp;#10;Back2minus1=nletter" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="NBackTrials_code" valType="code"/>
      </CodeComponent>
      <TextComponent name="NBackText_2">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.15" valType="code"/>
        <Param name="name" updates="None" val="NBackText_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$nletter" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="NBack_resp_2">
        <Param name="allowedKeys" updates="constant" val="'k', 'd'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$corrResponse" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="NBack_resp_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="time (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="restBreak2">
      <CodeComponent name="elapsed_timer_4">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="break2Timer = new util.Clock();&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="break2Timer = util.Clock()" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="psychoJS.experiment.addData(&quot;elapsed.time&quot;, elapsedTime.getTime());&amp;#10;psychoJS.experiment.addData(&quot;break2.duration&quot;, break2Timer.getTime());&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="psychoJS.experiment.addData('elapsed.time', elapsedTime.getTime())&amp;#10;psychoJS.experiment.addData('break2.duration', break2Timer.getTime())" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="elapsed_timer_4" valType="code"/>
      </CodeComponent>
      <TextComponent name="restBreak2Text">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.075" valType="code"/>
        <Param name="name" updates="None" val="restBreak2Text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="End of N-Back practice&amp;#10;&amp;#10;Please rest now if you need to or press the right arrow to continue to the next task" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="restBreak2_key_resp">
        <Param name="allowedKeys" updates="constant" val="['right']" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="restBreak2_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="restBreak3">
      <CodeComponent name="elapsed_timer_5">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="break3Timer = new util.Clock();&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="break3Timer = util.Clock()" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="psychoJS.experiment.addData(&quot;elapsed.time&quot;, elapsedTime.getTime());&amp;#10;psychoJS.experiment.addData(&quot;break3.duration&quot;, break3Timer.getTime());&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="psychoJS.experiment.addData('elapsed.time', elapsedTime.getTime())&amp;#10;psychoJS.experiment.addData('break3.duration', break3Timer.getTime())" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="elapsed_timer_5" valType="code"/>
      </CodeComponent>
      <TextComponent name="restBreak3Text">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.075" valType="code"/>
        <Param name="name" updates="None" val="restBreak3Text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="End of Visual Search Practice&amp;#10;&amp;#10;Please rest now if you need to or press the right arrow to continue to the next task" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="restBreak3_key_resp">
        <Param name="allowedKeys" updates="constant" val="['right']" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="restBreak3_key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="instrMentRot">
      <CodeComponent name="elapsed_timer_10">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="psychoJS.experiment.addData(&quot;elapsed.time&quot;, elapsedTime.getTime());&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="psychoJS.experiment.addData('elapsed.time', elapsedTime.getTime())" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="elapsed_timer_10" valType="code"/>
      </CodeComponent>
      <CodeComponent name="code_4">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="matchOpac = 0&amp;#10;flipOpac = 0&amp;#10;notpOpac = 0&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="matchOpac = 0;&amp;#10;flipOpac = 0;&amp;#10;notpOpac = 0;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if ((currentInstr === 12)) {&amp;#10;    currentInstr = 13;&amp;#10;}&amp;#10;matchOpac = 0;&amp;#10;flipOpac = 0;&amp;#10;notpOpac = 0;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if currentInstr == 12:&amp;#10;    currentInstr = 13  # ensure correct instructions are showing for n-back&amp;#10;&amp;#10;matchOpac = 0&amp;#10;flipOpac = 0&amp;#10;notpOpac = 0&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if currentInstr == 14:&amp;#10;            matchOpac = 1&amp;#10;            flipOpac = 0&amp;#10;            notOpac = 0&amp;#10;&amp;#10;elif currentInstr == 15:&amp;#10;            matchOpac = 0&amp;#10;            flipOpac = 1&amp;#10;            notOpac = 0&amp;#10;&amp;#10;elif currentInstr == 16:&amp;#10;            matchOpac = 0&amp;#10;            flipOpac = 0&amp;#10;            notOpac = 1&amp;#10;&amp;#10;elif currentInstr == 17:&amp;#10;            matchOpac = 0&amp;#10;            flipOpac = 0&amp;#10;            notOpac = 0&amp;#10;&amp;#10;elif currentInstr == 13:&amp;#10;            matchOpac = 0&amp;#10;            flipOpac = 0&amp;#10;            notOpac = 0&amp;#10;&amp;#10;elif currentInstr == 12:&amp;#10;            matchOpac = 0&amp;#10;            flipOpac = 0&amp;#10;            notOpac = 0&amp;#10;&amp;#10;if key_resp_5.keys == &quot;k&quot;:&amp;#10;    trials.finished = True&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="if ((currentInstr === 14)) {&amp;#10;    matchOpac = 1;&amp;#10;    flipOpac = 0;&amp;#10;    notOpac = 0;&amp;#10;} else {&amp;#10;    if ((currentInstr === 15)) {&amp;#10;        matchOpac = 0;&amp;#10;        flipOpac = 1;&amp;#10;        notOpac = 0;&amp;#10;    } else {&amp;#10;        if ((currentInstr === 16)) {&amp;#10;            matchOpac = 0;&amp;#10;            flipOpac = 0;&amp;#10;            notOpac = 1;&amp;#10;        } else {&amp;#10;            if ((currentInstr === 17)) {&amp;#10;                matchOpac = 0;&amp;#10;                flipOpac = 0;&amp;#10;                notOpac = 0;&amp;#10;            } else {&amp;#10;                if ((currentInstr === 13)) {&amp;#10;                    matchOpac = 0;&amp;#10;                    flipOpac = 0;&amp;#10;                    notOpac = 0;&amp;#10;                } else {&amp;#10;                    if ((currentInstr === 12)) {&amp;#10;                        matchOpac = 0;&amp;#10;                        flipOpac = 0;&amp;#10;                        notOpac = 0;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if ((key_resp_5.keys === &quot;k&quot;)) {&amp;#10;    trials.finished = true;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(key_resp_5.keys);&amp;#10;if ((key_resp_5.keys === &quot;left&quot;)) {&amp;#10;    currentInstr = (Number.parseInt(currentInstr) - 1);&amp;#10;} else {&amp;#10;    if ((key_resp_5.keys === &quot;right&quot;)) {&amp;#10;        currentInstr = (Number.parseInt(currentInstr) + 1);&amp;#10;    }&amp;#10;}&amp;#10;if ((currentInstr === 12)) {&amp;#10;    currentInstr = 13;&amp;#10;}&amp;#10;if ((currentInstr === 18)) {&amp;#10;    currentInstr = 17;&amp;#10;}&amp;#10;if ((key_resp_5.keys === &quot;k&quot;)) {&amp;#10;    currentLoop.finished = true;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(key_resp_5.keys)&amp;#10;&amp;#10;if key_resp_5.keys == &quot;left&quot;:&amp;#10;    currentInstr = int(currentInstr) - 1&amp;#10;elif key_resp_5.keys == &quot;right&quot;:&amp;#10;    currentInstr = int(currentInstr) + 1&amp;#10;&amp;#10;if currentInstr == 12:&amp;#10;    currentInstr = 13  # can't go lower than 10&amp;#10;&amp;#10;if currentInstr == 18:&amp;#10;    currentInstr = 17  # can't go higher than 12&amp;#10;&amp;#10;if key_resp_5.keys == &quot;k&quot;:&amp;#10;    currentLoop.finished = True&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_4" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_5">
        <Param name="allowedKeys" updates="constant" val="&quot;left&quot;, &quot;right&quot;, &quot;k&quot;" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_5" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="instrHeaderText_5">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="instrHeaderText_5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0.8)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Mental Rotation Task Instructions" valType="str"/>
        <Param name="units" updates="None" val="norm" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="text_5">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.075" valType="code"/>
        <Param name="name" updates="None" val="text_5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$instrDict[currentInstr]" valType="str"/>
        <Param name="units" updates="None" val="norm" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <ImageComponent name="MentRotMatching">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="1_0.jpg" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="MentRotMatching" valType="code"/>
        <Param name="opacity" updates="set every frame" val="matchOpac" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="constant" val="(0.935, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <ImageComponent name="MentRotMatchFlip">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="1_100.jpg" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="MentRotMatchFlip" valType="code"/>
        <Param name="opacity" updates="set every frame" val="flipOpac" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.935, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <ImageComponent name="MentRotNot">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="1_0_R.jpg" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="MentRotNot" valType="code"/>
        <Param name="opacity" updates="set every frame" val="notOpac" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="constant" val="(0.935, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
    </Routine>
    <Routine name="mentRotTrial">
      <ImageComponent name="mentRotStimulus">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$imagefile" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="mentRotStimulus" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.935, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="7.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="MROT_resp">
        <Param name="allowedKeys" updates="constant" val="'k', 'd'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$corrResponse" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="MROT_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="7.5" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="mentRotFeedback">
      <CodeComponent name="NBackfeedback_code_2">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="msg = ' '" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="msg = &quot; &quot;;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if (MROT_resp.corr) {&amp;#10;    msg = &quot;Correct&quot;;&amp;#10;} else {&amp;#10;    msg = &quot;Incorrect&quot;;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if MROT_resp.corr:&amp;#10;    msg = &quot;Correct&quot;&amp;#10;else:&amp;#10;    msg = &quot;Incorrect&quot;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="NBackfeedback_code_2" valType="code"/>
      </CodeComponent>
      <TextComponent name="NBackfeedback_text_2">
        <Param name="color" updates="constant" val="$[1.000,1.000,-1.000]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.15" valType="code"/>
        <Param name="name" updates="None" val="NBackfeedback_text_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$msg" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="NBackFeedback">
      <CodeComponent name="NBackfeedback_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="msg = ' '" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="msg = &quot; &quot;;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if (NBack_resp_2.corr) {&amp;#10;    msg = &quot;Correct&quot;;&amp;#10;} else {&amp;#10;    msg = &quot;Incorrect&quot;;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if NBack_resp_2.corr:&amp;#10;    msg = &quot;Correct&quot;&amp;#10;else:&amp;#10;    msg = &quot;Incorrect&quot;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="NBackfeedback_code" valType="code"/>
      </CodeComponent>
      <TextComponent name="AXCPTfeedback_text_2">
        <Param name="color" updates="constant" val="$[1.000,1.000,-1.000]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.15" valType="code"/>
        <Param name="name" updates="None" val="AXCPTfeedback_text_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$msg" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="end">
      <CodeComponent name="elapsed_timer_12">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="psychoJS.experiment.addData(&quot;elapsed.time&quot;, elapsedTime.getTime());&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="psychoJS.experiment.addData('elapsed.time', elapsedTime.getTime())" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="elapsed_timer_12" valType="code"/>
      </CodeComponent>
      <TextComponent name="end_text">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.075" valType="code"/>
        <Param name="name" updates="None" val="end_text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="End of Training Session&amp;#10;&amp;#10;Thank you for completing the training session&amp;#10;&amp;#10;Please contact the experimenter now to confirm that you have completed the training session&amp;#10;&amp;#10;They will then send you the link to the testing session which you will need to complete in 48 hours' time (2 days from now)&amp;#10;&amp;#10;Please press the space bar on your keyboard to finish the session" valType="str"/>
        <Param name="units" updates="None" val="norm" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="end_resp">
        <Param name="allowedKeys" updates="constant" val="['space']" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="end_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="createLoopTimer">
      <CodeComponent name="create_timer_1_code_5">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="loopTimer = new util.Clock();&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="loopTimer = util.Clock()" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="create_timer_1_code_5" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="instrSearch">
      <CodeComponent name="elapsed_timer_8">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="psychoJS.experiment.addData(&quot;elapsed.time&quot;, elapsedTime.getTime());&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="psychoJS.experiment.addData('elapsed.time', elapsedTime.getTime())" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="elapsed_timer_8" valType="code"/>
      </CodeComponent>
      <CodeComponent name="code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if ((currentInstr === 9)) {&amp;#10;    currentInstr = 10;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if currentInstr == 9:&amp;#10;    currentInstr = 10  # ensure correct instructions are showing for n-back&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="console.log(key_resp_4.keys);&amp;#10;if ((key_resp_4.keys === &quot;left&quot;)) {&amp;#10;    currentInstr = (Number.parseInt(currentInstr) - 1);&amp;#10;} else {&amp;#10;    if ((key_resp_4.keys === &quot;right&quot;)) {&amp;#10;        currentInstr = (Number.parseInt(currentInstr) + 1);&amp;#10;    }&amp;#10;}&amp;#10;if ((currentInstr === 9)) {&amp;#10;    currentInstr = 10;&amp;#10;}&amp;#10;if ((currentInstr === 13)) {&amp;#10;    currentInstr = 12;&amp;#10;}&amp;#10;if ((key_resp_4.keys === &quot;k&quot;)) {&amp;#10;    currentLoop.finished = true;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="print(key_resp_4.keys)&amp;#10;&amp;#10;if key_resp_4.keys == &quot;left&quot;:&amp;#10;    currentInstr = int(currentInstr) - 1&amp;#10;elif key_resp_4.keys == &quot;right&quot;:&amp;#10;    currentInstr = int(currentInstr) + 1&amp;#10;&amp;#10;if currentInstr == 9:&amp;#10;    currentInstr = 10  # can't go lower than 10&amp;#10;&amp;#10;if currentInstr == 13:&amp;#10;    currentInstr = 12  # can't go higher than 12&amp;#10;&amp;#10;if key_resp_4.keys == &quot;k&quot;:&amp;#10;    currentLoop.finished = True&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_4">
        <Param name="allowedKeys" updates="constant" val="&quot;left&quot;, &quot;right&quot;, &quot;k&quot;" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_4" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="instrHeaderText_4">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="instrHeaderText_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0.8)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Visual Search Task Instructions" valType="str"/>
        <Param name="units" updates="None" val="norm" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="text_4">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.075" valType="code"/>
        <Param name="name" updates="None" val="text_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$instrDict[currentInstr]" valType="str"/>
        <Param name="units" updates="None" val="norm" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="searchTrial">
      <CodeComponent name="defineFunctionsSearch">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="shuffle = util.shuffle&amp;#10;&amp;#10;function choice(arr) {&amp;#10;  return arr[Math.floor(Math.random() * arr.length)];&amp;#10;}" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="defineFunctionsSearch" valType="code"/>
      </CodeComponent>
      <CodeComponent name="searchCode">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="orientList = [0, 90, 180, 270]&amp;#10;PosList = [[.45, -.45], [.45, -.15], [.45, .15], [.45, .45], [.15, -.45], [.15, -.15], [.15, .15], [.15, .45], [-.15, -.45], [-.15, -.15], [-.15, .15], [-.15, .45], [-.45, -.45], [-.45, -.15], [-.45, .15], [-.45, .45]]" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="orientList = [0, 90, 180, 270];&amp;#10;PosList = [[0.45, (- 0.45)], [0.45, (- 0.15)], [0.45, 0.15], [0.45, 0.45], [0.15, (- 0.45)], [0.15, (- 0.15)], [0.15, 0.15], [0.15, 0.45], [(- 0.15), (- 0.45)], [(- 0.15), (- 0.15)], [(- 0.15), 0.15], [(- 0.15), 0.45], [(- 0.45), (- 0.45)], [(- 0.45), (- 0.15)], [(- 0.45), 0.15], [(- 0.45), 0.45]];&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="shuffle(PosList);&amp;#10;targetOrient = choice(orientList);&amp;#10;stim2Orient = choice(orientList);&amp;#10;stim3Orient = choice(orientList);&amp;#10;stim4Orient = choice(orientList);&amp;#10;stim5Orient = choice(orientList);&amp;#10;stim6Orient = choice(orientList);&amp;#10;stim7Orient = choice(orientList);&amp;#10;stim8Orient = choice(orientList);&amp;#10;stim9Orient = choice(orientList);&amp;#10;stim10Orient = choice(orientList);&amp;#10;stim11Orient = choice(orientList);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="shuffle(PosList)&amp;#10;&amp;#10;targetOrient = choice(orientList)&amp;#10;stim2Orient = choice (orientList)&amp;#10;stim3Orient = choice(orientList)&amp;#10;stim4Orient = choice(orientList)&amp;#10;stim5Orient = choice(orientList)&amp;#10;stim6Orient = choice(orientList)&amp;#10;stim7Orient = choice(orientList)&amp;#10;stim8Orient = choice(orientList)&amp;#10;stim9Orient = choice(orientList)&amp;#10;stim10Orient = choice(orientList)&amp;#10;stim11Orient = choice(orientList)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="searchCode" valType="code"/>
      </CodeComponent>
      <KeyboardComponent name="key_resp_6">
        <Param name="allowedKeys" updates="constant" val="'k', 'd'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$corrResponse" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_6" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="targetStim">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.15" valType="code"/>
        <Param name="name" updates="None" val="targetStim" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="set every repeat" val="targetOrient" valType="code"/>
        <Param name="pos" updates="set every repeat" val="PosList[1]" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$targetLetter" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="searchStim2">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.15" valType="code"/>
        <Param name="name" updates="None" val="searchStim2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="set every repeat" val="stim2Orient" valType="code"/>
        <Param name="pos" updates="set every repeat" val="PosList[2]" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="L" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="searchStim3">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.15" valType="code"/>
        <Param name="name" updates="None" val="searchStim3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="set every repeat" val="stim3Orient" valType="code"/>
        <Param name="pos" updates="set every repeat" val="PosList[3]" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="L" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="searchStim4">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.15" valType="code"/>
        <Param name="name" updates="None" val="searchStim4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="set every repeat" val="stim4Orient" valType="code"/>
        <Param name="pos" updates="set every repeat" val="PosList[4]" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="L" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="searchStim5">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.15" valType="code"/>
        <Param name="name" updates="None" val="searchStim5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="set every repeat" val="stim5Orient" valType="code"/>
        <Param name="pos" updates="set every repeat" val="PosList[5]" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="L" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="searchStim6">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.15" valType="code"/>
        <Param name="name" updates="None" val="searchStim6" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="set every repeat" val="stim6Orient" valType="code"/>
        <Param name="pos" updates="set every repeat" val="PosList[6]" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="L" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="searchStim7">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.15" valType="code"/>
        <Param name="name" updates="None" val="searchStim7" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="set every repeat" val="stim7Orient" valType="code"/>
        <Param name="pos" updates="set every repeat" val="PosList[7]" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="L" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="searchStim8">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.15" valType="code"/>
        <Param name="name" updates="None" val="searchStim8" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="set every repeat" val="stim8Orient" valType="code"/>
        <Param name="pos" updates="set every repeat" val="PosList[8]" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="L" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="searchStim9">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.15" valType="code"/>
        <Param name="name" updates="None" val="searchStim9" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="set every repeat" val="stim9Orient" valType="code"/>
        <Param name="pos" updates="set every repeat" val="PosList[9]" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="L" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="searchStim10">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.15" valType="code"/>
        <Param name="name" updates="None" val="searchStim10" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="set every repeat" val="stim10Orient" valType="code"/>
        <Param name="pos" updates="set every repeat" val="PosList[10]" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="L" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="searchStim11">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.15" valType="code"/>
        <Param name="name" updates="None" val="searchStim11" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="set every repeat" val="stim11Orient" valType="code"/>
        <Param name="pos" updates="set every repeat" val="PosList[11]" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="L" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="searchFeedback">
      <CodeComponent name="searchFeedback_code_3">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="msg = ' '" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="msg = &quot; &quot;;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if (key_resp_6.corr) {&amp;#10;    msg = &quot;Correct&quot;;&amp;#10;} else {&amp;#10;    msg = &quot;Incorrect&quot;;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if key_resp_6.corr:&amp;#10;    msg = &quot;Correct&quot;&amp;#10;else:&amp;#10;    msg = &quot;Incorrect&quot;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="searchFeedback_code_3" valType="code"/>
      </CodeComponent>
      <TextComponent name="searchFeedbackText">
        <Param name="color" updates="constant" val="$[1.000,1.000,-1.000]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.15" valType="code"/>
        <Param name="name" updates="None" val="searchFeedbackText" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$msg" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <LoopInitiator loopType="TrialHandler" name="instrLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="100" valType="code"/>
      <Param name="name" updates="None" val="instrLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="instr"/>
    <LoopTerminator name="instrLoop"/>
    <LoopInitiator loopType="TrialHandler" name="instrAXCPTLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="100" valType="code"/>
      <Param name="name" updates="None" val="instrAXCPTLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="instrAXCPT"/>
    <LoopTerminator name="instrAXCPTLoop"/>
    <Routine name="createLoopTimer"/>
    <LoopInitiator loopType="TrialHandler" name="AXCPTtrialsLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('trialNumber', 1), ('trial', 'AX'), ('cueType', 'A'), ('probeType', 'X'), ('trialType', 'target'), ('corrResponse', 'k')]), OrderedDict([('trialNumber', 2), ('trial', 'AX'), ('cueType', 'A'), ('probeType', 'X'), ('trialType', 'target'), ('corrResponse', 'k')]), OrderedDict([('trialNumber', 3), ('trial', 'AX'), ('cueType', 'A'), ('probeType', 'X'), ('trialType', 'target'), ('corrResponse', 'k')]), OrderedDict([('trialNumber', 4), ('trial', 'AX'), ('cueType', 'A'), ('probeType', 'X'), ('trialType', 'target'), ('corrResponse', 'k')]), OrderedDict([('trialNumber', 5), ('trial', 'AX'), ('cueType', 'A'), ('probeType', 'X'), ('trialType', 'target'), ('corrResponse', 'k')]), OrderedDict([('trialNumber', 6), ('trial', 'AX'), ('cueType', 'A'), ('probeType', 'X'), ('trialType', 'target'), ('corrResponse', 'k')]), OrderedDict([('trialNumber', 7), ('trial', 'AX'), ('cueType', 'A'), ('probeType', 'X'), ('trialType', 'target'), ('corrResponse', 'k')]), OrderedDict([('trialNumber', 8), ('trial', 'BX'), ('cueType', 'B'), ('probeType', 'X'), ('trialType', 'probeWrong'), ('corrResponse', 'd')]), OrderedDict([('trialNumber', 9), ('trial', 'AY'), ('cueType', 'A'), ('probeType', 'Y'), ('trialType', 'cueWrong'), ('corrResponse', 'd')]), OrderedDict([('trialNumber', 10), ('trial', 'BY'), ('cueType', 'B'), ('probeType', 'Y'), ('trialType', 'bothWrong'), ('corrResponse', 'd')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="trialType.csv" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="6000" valType="code"/>
      <Param name="name" updates="None" val="AXCPTtrialsLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="timer"/>
    <Routine name="AXCPTtrial"/>
    <Routine name="AXCPTprobe"/>
    <Routine name="AXCPTfeedback"/>
    <LoopTerminator name="AXCPTtrialsLoop"/>
    <Routine name="restBreak1"/>
    <Routine name="createLoopTimer"/>
    <LoopInitiator loopType="TrialHandler" name="instrNBackLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="100" valType="code"/>
      <Param name="name" updates="None" val="instrNBackLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="instrNBack"/>
    <LoopTerminator name="instrNBackLoop"/>
    <LoopInitiator loopType="TrialHandler" name="NBackTargetLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="3" valType="code"/>
      <Param name="name" updates="None" val="NBackTargetLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="timer"/>
    <Routine name="NBackFirst3Trials"/>
    <LoopTerminator name="NBackTargetLoop"/>
    <LoopInitiator loopType="TrialHandler" name="NBackTrialsLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('trial', 1), ('trialType', 'target'), ('corrResponse', 'k')]), OrderedDict([('trial', 2), ('trialType', 'target'), ('corrResponse', 'k')]), OrderedDict([('trial', 3), ('trialType', 'target'), ('corrResponse', 'k')]), OrderedDict([('trial', 4), ('trialType', 'nonTarget'), ('corrResponse', 'd')]), OrderedDict([('trial', 5), ('trialType', 'nonTarget'), ('corrResponse', 'd')]), OrderedDict([('trial', 6), ('trialType', 'nonTarget'), ('corrResponse', 'd')]), OrderedDict([('trial', 7), ('trialType', 'nonTarget'), ('corrResponse', 'd')]), OrderedDict([('trial', 8), ('trialType', 'nonTarget'), ('corrResponse', 'd')]), OrderedDict([('trial', 9), ('trialType', 'nonTarget'), ('corrResponse', 'd')]), OrderedDict([('trial', 10), ('trialType', 'nonTarget'), ('corrResponse', 'd')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="2-back_loop.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="6000" valType="code"/>
      <Param name="name" updates="None" val="NBackTrialsLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="timer"/>
    <Routine name="NBackRemainderTrials"/>
    <Routine name="NBackFeedback"/>
    <LoopTerminator name="NBackTrialsLoop"/>
    <Routine name="restBreak2"/>
    <LoopInitiator loopType="TrialHandler" name="instrSearchLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="100" valType="code"/>
      <Param name="name" updates="None" val="instrSearchLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="instrSearch"/>
    <LoopTerminator name="instrSearchLoop"/>
    <Routine name="createLoopTimer"/>
    <LoopInitiator loopType="TrialHandler" name="searchLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('cond', 'target'), ('targetLetter', 'T'), ('corrResponse', 'k')]), OrderedDict([('cond', 'nonTarget'), ('targetLetter', 'L'), ('corrResponse', 'd')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="visualSearchConds.csv" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="6000" valType="code"/>
      <Param name="name" updates="None" val="searchLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="timer"/>
    <Routine name="searchTrial"/>
    <Routine name="searchFeedback"/>
    <LoopTerminator name="searchLoop"/>
    <Routine name="restBreak3"/>
    <LoopInitiator loopType="TrialHandler" name="instrMentRotaLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="100" valType="code"/>
      <Param name="name" updates="None" val="instrMentRotaLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="instrMentRot"/>
    <LoopTerminator name="instrMentRotaLoop"/>
    <Routine name="createLoopTimer"/>
    <LoopInitiator loopType="TrialHandler" name="mentRotTrialsLooop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('imagefile', '10_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '10_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '10_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '10_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '10_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '10_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '10_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '10_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '11_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '11_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '11_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '11_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '11_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '11_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '11_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '11_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '12_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '12_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '12_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '12_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '12_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '12_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '12_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '12_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '13_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '13_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '13_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '13_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '13_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '13_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '13_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '13_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '14_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '14_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '14_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '14_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '14_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '14_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '14_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '14_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '15_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '15_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '15_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '15_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '15_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '15_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '15_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '15_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '16_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '16_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '16_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '16_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '16_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '16_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '16_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '16_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '17_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '17_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '17_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '17_100_R.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '17_150.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '17_150_R.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '17_50.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '17_50_R.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '18_0.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '18_0_R.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '18_100.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '18_100_R.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '18_150.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '18_150_R.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '18_50.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '18_50_R.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '19_0.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '19_0_R.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '19_100.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '19_100_R.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '19_150.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '19_150_R.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '19_50.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '19_50_R.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '1_0.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '1_0_R.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '1_100.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '1_100_R.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '1_150.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '1_150_R.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '1_50.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '1_50_R.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '20_0.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '20_0_R.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '20_100.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '20_100_R.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '20_150.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '20_150_R.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '20_50.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '20_50_R.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '21_0.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '21_0_R.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '21_100.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '21_100_R.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '21_150.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '21_150_R.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '21_50.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '21_50_R.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '22_0.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '22_0_R.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '22_100.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '22_100_R.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '22_150.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '22_150_R.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '22_50.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '22_50_R.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '23_0.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '23_0_R.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '23_100.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '23_100_R.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '23_150.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '23_150_R.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '23_50.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '23_50_R.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '24_0.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '24_0_R.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '24_100.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '24_100_R.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '24_150.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '24_150_R.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '24_50.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '24_50_R.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '25_0.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '25_0_R.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '25_100.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '25_100_R.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '25_150.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '25_150_R.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '25_50.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '25_50_R.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '26_0.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '26_0_R.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '26_100.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '26_100_R.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '26_150.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '26_150_R.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '26_50.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '26_50_R.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '27_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '27_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '27_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '27_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '27_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '27_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '27_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '27_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '28_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '28_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '28_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '28_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '28_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '28_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '28_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '28_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '29_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '29_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '29_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '29_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '29_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '29_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '29_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '29_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '2_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '2_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '2_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '2_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '2_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '2_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '2_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '2_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '30_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '30_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '30_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '30_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '30_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '30_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '30_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '30_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '31_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '31_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '31_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '31_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '31_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '31_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '31_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '31_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '32_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '32_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '32_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '32_100_R.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '32_150.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '32_150_R.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '32_50.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '32_50_R.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '33_0.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '33_0_R.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '33_100.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '33_100_R.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '33_150.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '33_150_R.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '33_50.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '33_50_R.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '34_0.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '34_0_R.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '34_100.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '34_100_R.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '34_150.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '34_150_R.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '34_50.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '34_50_R.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '35_0.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '35_0_R.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '35_100.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '35_100_R.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '35_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '35_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '35_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '35_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '36_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '36_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '36_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '36_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '36_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '36_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '36_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '36_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '37_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '37_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '37_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '37_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '37_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '37_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '37_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '37_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '38_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '38_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '38_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '38_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '38_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '38_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '38_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '38_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '39_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '39_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '39_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '39_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '39_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '39_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '39_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '39_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '3_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '3_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '3_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '3_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '3_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '3_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '3_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '3_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '40_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '40_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '40_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '40_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '40_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '40_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '40_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '40_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '41_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '41_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '41_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '41_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '41_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '41_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '41_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '41_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '42_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '42_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '42_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '42_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '42_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '42_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '42_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '42_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '43_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '43_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '43_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '43_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '43_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '43_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '43_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '43_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '44_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '44_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '44_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '44_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '44_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '44_150_R.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '44_50.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '44_50_R.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '45_0.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '45_0_R.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '45_100.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '45_100_R.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '45_150.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '45_150_R.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '45_50.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '45_50_R.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '46_0.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '46_0_R.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '46_100.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '46_100_R.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '46_150.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '46_150_R.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '46_50.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '46_50_R.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '47_0.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '47_0_R.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '47_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '47_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '47_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '47_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '47_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '47_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '48_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '48_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '48_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '48_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '48_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '48_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '48_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '48_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '4_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '4_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '4_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '4_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '4_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '4_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '4_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '4_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '5_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '5_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '5_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '5_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '5_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '5_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '5_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '5_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '6_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '6_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '6_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '6_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '6_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '6_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '6_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '6_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '7_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '7_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '7_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '7_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '7_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '7_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '7_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '7_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '8_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '8_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '8_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '8_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '8_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '8_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '8_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '8_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')]), OrderedDict([('imagefile', '9_0.jpg'), ('orientation', 0), ('corrResponse', 'k')]), OrderedDict([('imagefile', '9_0_R.jpg'), ('orientation', 0), ('corrResponse', 'd')]), OrderedDict([('imagefile', '9_100.jpg'), ('orientation', 100), ('corrResponse', 'k')]), OrderedDict([('imagefile', '9_100_R.jpg'), ('orientation', 100), ('corrResponse', 'd')]), OrderedDict([('imagefile', '9_150.jpg'), ('orientation', 150), ('corrResponse', 'k')]), OrderedDict([('imagefile', '9_150_R.jpg'), ('orientation', 150), ('corrResponse', 'd')]), OrderedDict([('imagefile', '9_50.jpg'), ('orientation', 50), ('corrResponse', 'k')]), OrderedDict([('imagefile', '9_50_R.jpg'), ('orientation', 50), ('corrResponse', 'd')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="response.csv" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="6000" valType="code"/>
      <Param name="name" updates="None" val="mentRotTrialsLooop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="timer"/>
    <Routine name="mentRotTrial"/>
    <Routine name="mentRotFeedback"/>
    <LoopTerminator name="mentRotTrialsLooop"/>
    <Routine name="end"/>
  </Flow>
</PsychoPy2experiment>
